import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import axios from 'axios';

const initialState = {
  cities: [],
  selectedCity: '',
  movies: [],
  selectedMovie: '',
  theatreHalls: [],
  selectedTheatreHall: '',
  screens: [],
  selectedScreens: '',
  selectedSeats:[]
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const getAllCities = createAsyncThunk(
  'city/fetchAll',
  async () => {
    const response = await axios.get("/cities");
    // console
    return response;
  }
);

export const selectCityAsync = createAsyncThunk(
    'city/select',
    async (id) => {
      const response = await axios.get(`/getMoviesForCity/${id}`);
      console.log(response);
      return {id,response};
    }
);
  
export const selectMovieAsync = createAsyncThunk(
    'selectMovieAsync',
    async (id) => {
      const response = await axios.get(`/getMoviesForCity/${id}`);
      console.log(response);
      return response;
    }
);

export const getTheatresForSelectedMovieAsync = createAsyncThunk(
    'getTheatresForSelectedMovieAsync',
    async (data) => {
    console.log(data.cityID);
    console.log(data.movieID);
    const response = await axios.get(`/getTheatresForSelectedMovie/${data.cityID}/${data.movieID}`);
    console.log(response);
    return response;
    }
);
  
export const getShowAsync = createAsyncThunk(
    'getTheatresForSelectedMovieAsync',
    async (data) => {
    console.log(data.cityID);
    console.log(data.movieID);
    const response = await axios.get(`/getTheatresForSelectedMovie/${data.cityID}/${data.movieID}`);
    console.log(response);
    return response;
    }
);
  
export const citySlice = createSlice({
  name: 'city',
  initialState,
  reducers: {
    selectCity: (state, action) => {
      state.selectedCity = action.payload;
    },
    setCities: (state, action) => {
      state.cities = action.payload.data.data;
    }
    
  },
  // The `reducers` field lets us define reducers and generate associated actions
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getAllCities.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(getAllCities.fulfilled, (state, action) => {
        state.status = 'idle';
        state.cities = action.payload;
      })
      .addCase(selectCityAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.movies = action.payload.response.data.data;
        state.selectedCity = action.payload.id;
      })
      .addCase(getTheatresForSelectedMovieAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.theatreHalls = action.payload.data.data;
      });
  },
});

export const { selectCity, setCities } = citySlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const allCities = (state) => state.root.cities;
export const selectedCity = (state) => state.root.selectedCity;
export const moviesInCity = (state) => state.root.movies;
export const theatreHalls = (state) => state.root.theatreHalls;

// // We can also write thunks by hand, which may contain both sync and async logic.
// // Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd = (amount) => (dispatch, getState) => {
//   const currentValue = selectCount(getState());
//   if (currentValue % 2 === 1) {
//     dispatch(incrementByAmount(amount));
//   }
// };

export default citySlice.reducer;
